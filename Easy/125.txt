125. Valid Palindrome
01/09/2025
Python3
Two Pointers

class Solution:
    def isPalindrome(self, s: str) -> bool:
        ## First prep s for analysis
        s = "".join(s.split()) #split() break string into elements base on space, returns list, join() combines list into one string
        s = "".join(ch for ch in s if ch.isalnum()) #check each char with isalnum(), if it is an alphanumeric char, we want
        s = s.lower() #make it lowercase

        ## Checking if s is a palindrome
        # Idea, split the string in half, and compare if they are the same, 
        # One loop reads the first half and the second loop reads the second half
        # both halfs must mirror each other
        middle = int(len(s)/2) #21/2 is 10, not 10.5
        first_half = ""
        second_half = ""
        ##testing for the word raceecar
        #will read foward, add 
        for i in range(middle):
            first_half += (s[i])
        #will read backwards
        #if the word is even, we do middle + 1
        if len(s)%2 == 0: #if even
            middle -= 1 
        for j in range(len(s)-1, middle, -1):
            second_half += (s[j])
            
        if first_half == second_half:
            return True
        else:
            return False


BETTER SOLUTION
class Solution:
    def isPalindrome(self, s: str) -> bool:
        s = ''.join(c.lower() for c in s if c.isalnum())
        left = 0 
        right = len(s) - 1

        while left < right:
            if s[left] != s[right]:
                return False
            left += 1
            right -= 1

        return True

RERUN, successful, 02/05/2025